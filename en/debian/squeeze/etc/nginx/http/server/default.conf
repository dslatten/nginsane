server { # Do not put anything above this line!

# Notes:
#   

################################################################################
#                                DEFAULT SERVER                                #
################################################################################
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################

# HTTPS configuration:
# include  http/server/https.conf;

# PHP configuration:
# include  http/server/php.conf;

################################################################################

# LISTEN
# syntax:   
# default:  
# example:  
# context:  
# notes:
#   If only address is given, the port 80 is used.
#   If directive is not present then either the *:80 is used if nginx runs with superuser privileges, or *:8000 otherwise.
#   The default_server parameter, if present, will cause the server to become the default server for the specified address:port pair. If none of the directives have the default_server parameter then the first server with the address:port pair will be the default server for this pair.
#
listen  80  default_server;

# SERVER_NAME
# syntax:   
# default:  
# example:  
# context:  
# notes:
#   
#
server_name  localhost;

# ROOT
# syntax:   
# default:  
# example:  
# context:  
# notes:
#   
#
root  /srv/www/default/public_html;

# LOCATION
# syntax:   location  [=|~|~*|^~]  %uri_expr {...}
# syntax:   location  @%name {...}
# default:  
# example:  location = /favicon.ico { access_log off; log_not_found off; }
# context:  server, location
# notes:
#    location  =   %uri_expr  {%conf}    # Applies configuration %conf if location matches the string %uri_expr exactly.
#    location      %uri_expr  {%conf}    # Applies configuration %conf if location begins with string %uri_expr.
#    location  ^~  %uri_expr  {%conf}    # Applies configuration %conf if 
#    location  ~   %uri_expr  {%conf}    # Applies configuration %conf if location matches the RegExp %uri_expr (case-sensitive).
#    location  ~*  %uri_expr  {%conf}    # Applies configuration %conf if location matches the RegExp %uri_expr (case-insensitive).
#


# ERROR_PAGE
# syntax:   error_page code ... [=[response]] uri;
# default:  error_page  404  /404.html;
# example:  
# context:  http, server, location, if in location
# notes:
#   Defines the URI that will be shown for the specified errors. These directives are inherited from the previous level if and only if there are no error_page directives on the current level. A URI value can contain variables.
#
error_page              404  /error/404.html;
error_page  500 502 503 504  /error/50x.html;


# remove the robots line if you want to use wordpress' virtual robots.txt
location = /robots.txt  { access_log off; log_not_found off; }
location = /favicon.ico { access_log off; log_not_found off; }  

# this prevents hidden files (beginning with a period) from being served
location ~ /\.          { access_log off; log_not_found off; deny all; }


} # Do not put anything below this line!